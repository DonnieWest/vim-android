*vim-android.txt*   For Vim version 7.3 or NeoVim    Last change: 2015 July 30

Author:         Horacio Sanson
Licence:        Vim licence, see |license|
Homepage:       https://github.com/hsanson/vim-android
Version:        1.3.0

==============================================================================
Contents                                   *vim-android* *vim-android-contents*

         1. Intro ........................... |vim-android-intro|
              Changelog                       |vim-android-changelog|
              Supported Features              |vim-android-features|
              Known Issues                    |vim-android-issues|
         2. Requirements .................... |vim-android-requirements|
         3. Installation .................... |vim-android-installation|
         4. Usage ........................... |vim-android-usage|
              Commands ...................... |vim-android-commands|
              Key mappings .................. |vim-android-keys|
              Omnicompletion ................ |vim-android-omnicomplete|
              Linter Support................. |vim-android-linter|
              Airline Support................ |vim-android-airline|
         5. Configuration ................... |vim-android-configuration|
         6. Todo ............................ |vim-android-todo|
         7. Credits ......................... |vim-android-credits|

==============================================================================
1. Intro                                                      *vim-android-intro*

vim-android is a plugin that facilitates the development of Gradle and Android
applications within vim. When editing a java or xml file this plugin tries
to find gradle.build file in the current directory and if found it
cofigures a set of variables and commands that allows easier development for
Gradle projects. If the gradle.build file contains the android gradle plugin
then Android specific commands are also configured.

------------------------------------------------------------------------------
Changelog                                                  *vim-android-changelog*

IMPORTANT: This plugin now uses gradle itself to inspect the project and
extract dependencies and source paths. This is faster than parsing the
configuration files and more correct.

IMPORTANT: Since I do not use ant anymore for android development and Android
Studio with the gradle plugin has come a long way now I am removing all ant
related functions from the plugin. It is difficult to maintain funcionality
that I do not use.


------------------------------------------------------------------------------
SUPPORTED FEATURES                                         *vim-android-features*

The following features are supported by vim-android:

  - Auto-detection of Gradle and Android projects when opening a Java or
    XML file. For this the plugin uses findfile function that searches from the
    current buffer path backwards until it finds a build.gralde file for the
    project.
  - Custom gradle vim compiler that invokes gradle directly with any
    arguments passed to the command.
  - Custom errorformat that captures java errors, linter errors, test errors,
    aapt errors, checkstyle, pmd, findbugs and displays them in the quickfix
    window.
  - Updates the CLASSPATH environment variable to include paths for your
    current project, external libs, external lib-projects and the current
    target Android SDK jars. This allows auto-completion of Java code using
    other plugins such as javacomplete2.
  - Updates the SRCPATH environment variable to include source paths for the
    current project and dependencies if available. This allows debuggers like
    vebugger to follow source code during step debugging.
  - Adds useful commands to compile and install your application APK into
    your emulator/devices.
  - Adds useful commands to generate tags for the current project source and
    the Android SDK sources.

------------------------------------------------------------------------------
Known Issues                                                *vim-android-issues*

  - The first time an android java or xml file is openned we create a list of
    dependencies for the project and a cache with all the packages found in the
    gradle home folder. This process can be extremely slow depending on the
    number of dependencies the project has and the number of packages cached in
    your gradle home.

  - To get full support of AAPT errors in the quickfix window of vim it is
    recommended that you use the android gradle plugin version 1.3.0 or newer.
    Previous versions of the android gradle plugin fail to show correctly the
    absolute path of the XML files that have errors making it difficult to jump
    to the problem files directly within vim.

        https://code.google.com/p/android/issues/detail?id=57513
        https://code.google.com/p/android/issues/detail?id=174778

  - The javacomplete plugin is nice but in some situations it hangs or spits
    thousands of incomprensible error messages. For this reason I recommend
    you use the new javacomplete2 plugin instead:

      See: https://github.com/artur-shaik/vim-javacomplete2

==============================================================================
2. Requirements                                        *vim-android-requirements*

The following requirements have to be met in order to be able to use vim-android:

  - Vim 7.3 or a recent build of Neovim. This plugin may also work with previous
    versions but I have only tested Vim 7.3 and Neovim.
  - Android SDK installed and with the platform-tools directory set in your
    PATH environment variable.
    - Android gradle plugin 1.3.0 or newer recommended.
    - Android build tools 22.0.1 or newer recommended.
  - Gradle 2.2+ in your PATH.
  - The exuberant-ctags package if you want to generate tags for the android
    project, dependencies and the Android SDK.

==============================================================================
3. Installation                                        *vim-android-installation*

It is recommended that you use a package manager like Pathogen or Vundle to
install this plugin. In the case of Vundle all you have to do is add this
line to your vimrc:
>
       Bundle 'hsanson/vim-android'
<
and then inside vim run the |:BundleInstall| command.

==============================================================================
4. Usage                                                      *vim-android-usage*

Before using this plugin you must tell it where you have the android SDK
installed. There are two ways to do this: you can set the ANDROID_HOME
environment variable to the absolute path of the android SDK or you can set
it to the global variable g:android_sdk_path in your vimrc file.

When you open a Java or XML file this plugin looks for a build.gradle file
starting from the location of the current open buffer upwards until your
HOME directory. If it is found this plugin activates and enables several
commands that faciliate working on Android projects and exports environment
variables that can be used by other plugins for omnicomplete and debugging.

Optionally you may also set |g:gradle_path| to tell the plugin where to look
for the gradle binaries. Check the options documentation below for more
details on these and other options.

------------------------------------------------------------------------------
GRADLE BUILD                                                 *vim-android-build*

For better results it is recommended to enable stderr output for the gradle linter
and use version 1.3.0 or newer of the android gradle plugin and version 22.0.1 or
newer of the android build tools. Below is an example of a build.gradle file that
fullfills these requirements:

    buildscript {
      repositories {
        mavenCentral()
        jcenter()
      }

      dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
      }
    }

    android {
      lintOptions {
        textReport true
        textOutput "stderr"
      }
    }

------------------------------------------------------------------------------
COMMANDS                                                   *vim-android-commands*

:Gradle <options>
    Invokes gradle passing the <options> verbatim. Any gradle options
    available via command line can be used using this command.

:Android <options>
    This is an alias to the Gradle command.

:AndroidInstall <mode>                                   *:AndroidDebugInstall*
    Build and installs the application in <mode> mode. In the case that you
    have several emulators running and/or several devices connected then this
    command will present you a list of emulators/devices so you can choose to
    which one the APK should be installed to. If there are not apk files
    build this command fails with an error. Current version of gradle can also
    install the APK on all connected devices so invoking :Android installDebug
    or :Android installRelease should have the same effect if you have a recent
    enough version of the android gradle plugin.

:AndroidUninstall                                           *:AndroidUninstall*
    This command allows to uninstall the application. If you have several
    emulators running and/or several devices connected, then this command will
    prompt you with a list of emulators/devices so you can choose from which one
    the app should be uninstalled. Current version of gradle can also uninstall
    the APKs from all connected devices so invoking :Android uninstallAll should
    have the same effect as long as you have a recent version of android gradle
    plugin.

:AndroidUpdateTags                                          *:AndroidUpdateTags*
    This is a simple helper command that generates a tags file from the
    android sdk sources, the library dependencies and the current android
    project. The generated tags file is located in the |g:android_sdk_tags|
    folder and is automatically set into the vim tags variable.

    Generating the tags file for the Android SDK requires that you have the
    exuberant-ctags command utility installed and available in your PATH.
    Plain ctags may work too but some plugins (e.g. YouCompleteMe) do require
    some flags available only in exuberant-ctags.

    You should invoke this command every time you change library dependencies,
    the android target API, and you project source files. You may create an
    command to update the tags everytime a file is saved.

:AndroidDevices                                               *:AndroidDevices*
    Lists all android devices connected and all running emulators.

:AndroidEmulator                                             *:AndroidEmulator*
    Allows to start defined avd emulators within vim.

------------------------------------------------------------------------------
KEY MAPPINGS                                                  *vim-android-keys*

By default the vim-android plugin has no mappings and all functionality is
accessed using the commmands |vim-android-commands| but this does not impede
you from creating your own mappings.

For example you can map a function key (e.g. F5) to compile your project in
debug mode using:

>
nmap <F5> <ESC>:Android assembleDebug<CR>
<

this way anytime you press the <F5> key it will build and install your
Android application.

------------------------------------------------------------------------------
ANDROID OMNI-COMPLETION                              *vim-android-omnicomplete*

This plugin by itself does not provide omni-completion of Android classes
and/or methods. Instead it sets the CLASSPATH envirnment variable with the
paths of all jar and class files used in the project. This include projects
own classes and dependencies.

With the CLASSPATH set, plugins such as the javacomplete2 can be used to
enable omnicompletion (https://github.com/artur-shaik/vim-javacomplete2).

------------------------------------------------------------------------------
ANDROID LINTER SUPPORT                                      *vim-android-linter*

By default the android gradle plugin does not print linter errors on stdout or
stderror. In order for this plugin to be able to capture and display linter
errors in the quickfix window we first need to enable linter output to stderr.

To redirect all linter output to stderr you must add the following
configuration to your build.gradle file within the android block:

    android {
      lintOptions {
        textReport true
        textOutput "stderr"
      }
    }

Once this configuration is set you can run the linter within vim with the
command:

    :Android lint

that will execute the linter and show all warnings and errors within the
quickfix window for easy navigation.

------------------------------------------------------------------------------
ANDROID AIRLINE SUPPORT                                    *vim-android-airline*

This plugin has custom parts that are diplayed in the airline status bar.
There are some global configuration variables that you can set to change how
these are displayed

                                                 *g:gradle_airline_android_glyph*
g:android_airline_android_glyph~
Default: "Android"
~
This glyph is displayed next to the filetype section if the project is an Android
project. If you use poweline or nerd patched fonts I higly recomend you set
the android glyph:
>
        let g:android_airline_android_glyph = 'U+f17b'
<
                                                   *g:gradle_airline_error_glyph*
g:android_airline_error_glyph~
Default: "Error: "
~
This glyph is shown in the airline warning section when the quickfix window
contains errors after building the gradle project. If you use powerline or
nerd patched fonts I recommend you set the alert glyph:
>
        let g:android_airline_error_glyph = 'U+f06a'
<
                                                 *g:gradle_airline_warning_glyph*
g:android_airline_warning_glyph~
Default: "Warning: "
~
This glyph is shown in the airline warning section when the quickfix window
contains warnings after building the gradle project. If you use powerline or
nerd patched fonts I recommend you set the warning glyph:
>
        let g:android_airline_warning_glyph = 'U+f071'
<
Note: To insert UTF codes in your vim configuration you must enter insert mode
and then press <Ctrl+v> followed by 'u' and then the hex code.

==============================================================================
5. Configuration                                     *vim-android-configuration*

                                                        *g:android_sdk_path*
g:android_sdk_path~
Default: $ANDROID_HOME

This option must specify the location of your Android SDK installation.

Example:
>
        let g:android_sdk_path = '/opt/adroid-sdk'
<

                                                               *g:gradle_path*
g:gradle_path~
Default: $GRADLE_HOME

When building gradle based projects we need to use the gradle tool to build
and install APK files. The g:gradle_path should be set to the absolute
directory path where gradle is installed. If g:gradle_path is not set then we
fallback to the $GRADLE_HOME environment variable. If none is set then we
search the gradle binary using the PATH environment variable.

Example:
>
    let g:gradle_path=/path/to/gradle/home
<

                                                            *g:android_adb_tool*
g:android_adb_tool~
Default: {g:android_sdk_path}/tools/adb

This plugin relies heavily on the Android ADB tool to query devices/emulators
and to install the APK files. By default this tool is found inside the
Android SDK so you do not need to set this variable but if for some reason in
you installation the ADB tool is located in a different path you can
explicitly tell the plugin where to find it using this variable.

Example:
>
        let g:android_adb_tool=/path/to/tool/adb
<

                                                            *g:android_sdk_tags*
g:android_sdk_tags~
Default: $(PWD)/.tags

This variable is the path were the tags file generated by the
|:AndroidUpdateTags| command. If you prefer the tags file to be located on
another place you can set this variable in your vimrc file to that location.

Example:
>
        let g:android_sdk_tags=/path/to/tags/project.tags
<
                                                        *g:gradle_quickfix_show*
g:gradle_quickfix_show~
Default: 1

If there are errors in the quickfix window after a gradle build the quickfix
window will automatically be open. If there are no errors it will
automatically be closed. If you want to disable this behavior simply set the
above variable to 0.

Example:
>
        let g:gradle_quickfix_show=0
<
==============================================================================
9. Todo                                                       *vim-android-todo*

  - Better Android XML omni-completion.
  - Better support AndroidAnnotation errors.
  - Project creation commands.

==============================================================================
10. Credits                                                *vim-android-credits*

vim-android was written from scratch but I learned and used as reference
several other plugins:

 - https://github.com/bpowell/vim-android
 - https://github.com/mgarriott/vim-android
 - https://github.com/artur-shaik/vim-javacomplete2
 - http://flukus.github.io/2015/07/03/2015_07_03-Vim-errorformat-Demystified/
 - https://github.com/bling/vim-airline
 - https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts
 - https://github.com/powerline/fonts

==============================================================================
 vim: tw=78 ts=8 sw=4 sts=4 et ft=help
